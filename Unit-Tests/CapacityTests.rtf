{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red196\green26\blue22;\red0\green0\blue0;
\red170\green13\blue145;\red92\green38\blue153;\red63\green110\blue116;\red46\green13\blue110;\red38\green71\blue75;
\red28\green0\blue207;\red0\green116\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c39100\c22000\c12500;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c18100\c5200\c43100;\csgenericrgb\c14900\c27800\c29400;
\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c0\c45600\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 #import \cf3 <XCTest/XCTest.h>\cf2 \
\cf4 \
\cf2 #import \cf3 "CapacitySystem.h"\cf2 \
#import \cf3 "DoubleFunctions.h"\cf2 \
\cf4 \
\cf5 @interface\cf4  CapacityTests : \cf6 XCTestCase\cf4 \
\
\cf5 @end\cf4 \
\
\cf5 @implementation\cf4  CapacityTests\
\{\
    \cf7 CapacitySystem\cf4  *capacitySystem;\
    \
    \cf5 double\cf4  result;\
\}\
\
-(\cf5 instancetype\cf4 ) initWithInvocation:(\cf6 NSInvocation\cf4  *)invocation\
\{\
    \cf5 self\cf4  = [\cf5 super\cf4  \cf8 initWithInvocation\cf4 :invocation];\
    \cf5 if\cf4  (\cf5 self\cf4 )\
    \{\
        \cf7 capacitySystem\cf4  = [\cf7 CapacitySystem\cf4  \cf9 getInstance\cf4 ];\
    \}\
    \cf5 return\cf4  \cf5 self\cf4 ;\
\}\
\
- (\cf5 void\cf4 )setUp\
\{\
    [\cf5 super\cf4  \cf8 setUp\cf4 ];\
\}\
\
- (\cf5 void\cf4 )tearDown\
\{\
    [\cf5 super\cf4  \cf8 tearDown\cf4 ];\
\}\
\
- (\cf5 void\cf4 ) testMilliliter\
\{\
    \cf5 double\cf4  value = \cf10 100\cf4 ;\
    \cf5 double\cf4  expected[] = \{\cf10 100\cf4 , \cf10 10\cf4 , \cf10 1\cf4 , \cf10 0.1\cf4 , \cf10 0.01\cf4 , \cf10 0.001\cf4 , \cf10 0.0001\cf4 , \cf10 20.2884201813\cf4 , \cf10 6.762804540369\cf4 , \cf10 3.38140227018\cf4 , \cf10 0.422675283773\cf4 , \cf10 0.2113376418865\cf4 , \cf10 0.1056688209433\cf4 , \cf10 0.02641720523581\cf4 \};\
    \cf7 Measurement\cf4  units[] = \{\cf9 MILLI\cf4 , \cf9 CENTI\cf4 , \cf9 DECI\cf4 , \cf9 JUST\cf4 , \cf9 DECA\cf4 , \cf9 HECTO\cf4 , \cf9 KILO\cf4 , \cf9 TEASPOON\cf4 , \cf9 TABLESPOON\cf4 , \cf9 FLUIDOUNCE\cf4 , \cf9 CUP\cf4 , \cf9 PINT\cf4 , \cf9 QUART\cf4 , \cf9 GALLON\cf4 \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 14\cf4 ; i++)\
    \{\
        \cf7 result\cf4  = [\cf7 capacitySystem\cf4  \cf9 convert\cf4 :value \cf9 ofUnit\cf4 :\cf9 MILLI\cf4  \cf9 toUnit\cf4 :units[i]];\
        \cf2 XCTAssertTrue\cf4 ([\cf7 DoubleFunctions\cf4  \cf9 isEqual\cf4 :\cf7 result\cf4  :expected[i]]);\
    \}\
\}\
\
- (\cf5 void\cf4 ) testCentiliter\
\{\
    \cf5 double\cf4  value = \cf10 100\cf4 ;\
    \cf5 double\cf4  expected[] = \{\cf10 100\cf4 , \cf10 10\cf4 , \cf10 1\cf4 , \cf10 0.1\cf4 , \cf10 0.01\cf4 , \cf10 0.001\cf4 , \cf10 0.0001\cf4 , \cf10 20.2884201813\cf4 , \cf10 6.762804540369\cf4 , \cf10 3.38140227018\cf4 , \cf10 0.422675283773\cf4 , \cf10 0.2113376418865\cf4 , \cf10 0.1056688209433\cf4 , \cf10 0.02641720523581\cf4 \};\
    \cf7 Measurement\cf4  units[] = \{\cf9 MILLI\cf4 , \cf9 CENTI\cf4 , \cf9 DECI\cf4 , \cf9 JUST\cf4 , \cf9 DECA\cf4 , \cf9 HECTO\cf4 , \cf9 KILO\cf4 , \cf9 TEASPOON\cf4 , \cf9 TABLESPOON\cf4 , \cf9 FLUIDOUNCE\cf4 , \cf9 CUP\cf4 , \cf9 PINT\cf4 , \cf9 QUART\cf4 , \cf9 GALLON\cf4 \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 14\cf4 ; i++)\
    \{\
        \cf7 result\cf4  = [\cf7 capacitySystem\cf4  \cf9 convert\cf4 :value \cf9 ofUnit\cf4 :\cf9 MILLI\cf4  \cf9 toUnit\cf4 :units[i]];\
        \cf2 XCTAssertTrue\cf4 ([\cf7 DoubleFunctions\cf4  \cf9 isEqual\cf4 :\cf7 result\cf4  :expected[i]]);\
    \}\
\}\
\
- (\cf5 void\cf4 ) testDeciliter\
\{\
    \cf5 double\cf4  value = \cf10 100\cf4 ;\
    \cf5 double\cf4  expected[] = \{\cf10 100\cf4 , \cf10 10\cf4 , \cf10 1\cf4 , \cf10 0.1\cf4 , \cf10 0.01\cf4 , \cf10 0.001\cf4 , \cf10 0.0001\cf4 , \cf10 20.2884201813\cf4 , \cf10 6.762804540369\cf4 , \cf10 3.38140227018\cf4 , \cf10 0.422675283773\cf4 , \cf10 0.2113376418865\cf4 , \cf10 0.1056688209433\cf4 , \cf10 0.02641720523581\cf4 \};\
    \cf7 Measurement\cf4  units[] = \{\cf9 MILLI\cf4 , \cf9 CENTI\cf4 , \cf9 DECI\cf4 , \cf9 JUST\cf4 , \cf9 DECA\cf4 , \cf9 HECTO\cf4 , \cf9 KILO\cf4 , \cf9 TEASPOON\cf4 , \cf9 TABLESPOON\cf4 , \cf9 FLUIDOUNCE\cf4 , \cf9 CUP\cf4 , \cf9 PINT\cf4 , \cf9 QUART\cf4 , \cf9 GALLON\cf4 \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 14\cf4 ; i++)\
    \{\
        \cf7 result\cf4  = [\cf7 capacitySystem\cf4  \cf9 convert\cf4 :value \cf9 ofUnit\cf4 :\cf9 MILLI\cf4  \cf9 toUnit\cf4 :units[i]];\
        \cf2 XCTAssertTrue\cf4 ([\cf7 DoubleFunctions\cf4  \cf9 isEqual\cf4 :\cf7 result\cf4  :expected[i]]);\
    \}\
\}\
\
- (\cf5 void\cf4 ) testLiter\
\{\
    \cf5 double\cf4  value = \cf10 100\cf4 ;\
    \cf5 double\cf4  expected[] = \{\cf10 100\cf4 , \cf10 10\cf4 , \cf10 1\cf4 , \cf10 0.1\cf4 , \cf10 0.01\cf4 , \cf10 0.001\cf4 , \cf10 0.0001\cf4 , \cf10 20.2884201813\cf4 , \cf10 6.762804540369\cf4 , \cf10 3.38140227018\cf4 , \cf10 0.422675283773\cf4 , \cf10 0.2113376418865\cf4 , \cf10 0.1056688209433\cf4 , \cf10 0.02641720523581\cf4 \};\
    \cf7 Measurement\cf4  units[] = \{\cf9 MILLI\cf4 , \cf9 CENTI\cf4 , \cf9 DECI\cf4 , \cf9 JUST\cf4 , \cf9 DECA\cf4 , \cf9 HECTO\cf4 , \cf9 KILO\cf4 , \cf9 TEASPOON\cf4 , \cf9 TABLESPOON\cf4 , \cf9 FLUIDOUNCE\cf4 , \cf9 CUP\cf4 , \cf9 PINT\cf4 , \cf9 QUART\cf4 , \cf9 GALLON\cf4 \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 14\cf4 ; i++)\
    \{\
        \cf7 result\cf4  = [\cf7 capacitySystem\cf4  \cf9 convert\cf4 :value \cf9 ofUnit\cf4 :\cf9 MILLI\cf4  \cf9 toUnit\cf4 :units[i]];\
        \cf2 XCTAssertTrue\cf4 ([\cf7 DoubleFunctions\cf4  \cf9 isEqual\cf4 :\cf7 result\cf4  :expected[i]]);\
    \}\
\}\
\
- (\cf5 void\cf4 ) testDecaliter\
\{\
    \cf5 double\cf4  value = \cf10 100\cf4 ;\
    \cf5 double\cf4  expected[] = \{\cf10 100\cf4 , \cf10 10\cf4 , \cf10 1\cf4 , \cf10 0.1\cf4 , \cf10 0.01\cf4 , \cf10 0.001\cf4 , \cf10 0.0001\cf4 , \cf10 20.2884201813\cf4 , \cf10 6.762804540369\cf4 , \cf10 3.38140227018\cf4 , \cf10 0.422675283773\cf4 , \cf10 0.2113376418865\cf4 , \cf10 0.1056688209433\cf4 , \cf10 0.02641720523581\cf4 \};\
    \cf7 Measurement\cf4  units[] = \{\cf9 MILLI\cf4 , \cf9 CENTI\cf4 , \cf9 DECI\cf4 , \cf9 JUST\cf4 , \cf9 DECA\cf4 , \cf9 HECTO\cf4 , \cf9 KILO\cf4 , \cf9 TEASPOON\cf4 , \cf9 TABLESPOON\cf4 , \cf9 FLUIDOUNCE\cf4 , \cf9 CUP\cf4 , \cf9 PINT\cf4 , \cf9 QUART\cf4 , \cf9 GALLON\cf4 \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 14\cf4 ; i++)\
    \{\
        \cf7 result\cf4  = [\cf7 capacitySystem\cf4  \cf9 convert\cf4 :value \cf9 ofUnit\cf4 :\cf9 MILLI\cf4  \cf9 toUnit\cf4 :units[i]];\
        \cf2 XCTAssertTrue\cf4 ([\cf7 DoubleFunctions\cf4  \cf9 isEqual\cf4 :\cf7 result\cf4  :expected[i]]);\
    \}\
\}\
\
- (\cf5 void\cf4 ) testHectoliter\
\{\
    \cf5 double\cf4  value = \cf10 100\cf4 ;\
    \cf5 double\cf4  expected[] = \{\cf10 100\cf4 , \cf10 10\cf4 , \cf10 1\cf4 , \cf10 0.1\cf4 , \cf10 0.01\cf4 , \cf10 0.001\cf4 , \cf10 0.0001\cf4 , \cf10 20.2884201813\cf4 , \cf10 6.762804540369\cf4 , \cf10 3.38140227018\cf4 , \cf10 0.422675283773\cf4 , \cf10 0.2113376418865\cf4 , \cf10 0.1056688209433\cf4 , \cf10 0.02641720523581\cf4 \};\
    \cf7 Measurement\cf4  units[] = \{\cf9 MILLI\cf4 , \cf9 CENTI\cf4 , \cf9 DECI\cf4 , \cf9 JUST\cf4 , \cf9 DECA\cf4 , \cf9 HECTO\cf4 , \cf9 KILO\cf4 , \cf9 TEASPOON\cf4 , \cf9 TABLESPOON\cf4 , \cf9 FLUIDOUNCE\cf4 , \cf9 CUP\cf4 , \cf9 PINT\cf4 , \cf9 QUART\cf4 , \cf9 GALLON\cf4 \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 14\cf4 ; i++)\
    \{\
        \cf7 result\cf4  = [\cf7 capacitySystem\cf4  \cf9 convert\cf4 :value \cf9 ofUnit\cf4 :\cf9 MILLI\cf4  \cf9 toUnit\cf4 :units[i]];\
        \cf2 XCTAssertTrue\cf4 ([\cf7 DoubleFunctions\cf4  \cf9 isEqual\cf4 :\cf7 result\cf4  :expected[i]]);\
    \}\
\}\
\
- (\cf5 void\cf4 ) testKiloliter\
\{\
    \cf5 double\cf4  value = \cf10 100\cf4 ;\
    \cf5 double\cf4  expected[] = \{\cf10 100\cf4 , \cf10 10\cf4 , \cf10 1\cf4 , \cf10 0.1\cf4 , \cf10 0.01\cf4 , \cf10 0.001\cf4 , \cf10 0.0001\cf4 , \cf10 20.2884201813\cf4 , \cf10 6.762804540369\cf4 , \cf10 3.38140227018\cf4 , \cf10 0.422675283773\cf4 , \cf10 0.2113376418865\cf4 , \cf10 0.1056688209433\cf4 , \cf10 0.02641720523581\cf4 \};\
    \cf7 Measurement\cf4  units[] = \{\cf9 MILLI\cf4 , \cf9 CENTI\cf4 , \cf9 DECI\cf4 , \cf9 JUST\cf4 , \cf9 DECA\cf4 , \cf9 HECTO\cf4 , \cf9 KILO\cf4 , \cf9 TEASPOON\cf4 , \cf9 TABLESPOON\cf4 , \cf9 FLUIDOUNCE\cf4 , \cf9 CUP\cf4 , \cf9 PINT\cf4 , \cf9 QUART\cf4 , \cf9 GALLON\cf4 \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 14\cf4 ; i++)\
    \{\
        \cf7 result\cf4  = [\cf7 capacitySystem\cf4  \cf9 convert\cf4 :value \cf9 ofUnit\cf4 :\cf9 MILLI\cf4  \cf9 toUnit\cf4 :units[i]];\
        \cf2 XCTAssertTrue\cf4 ([\cf7 DoubleFunctions\cf4  \cf9 isEqual\cf4 :\cf7 result\cf4  :expected[i]]);\
    \}\
\}\
\
- (\cf5 void\cf4 ) testTeaspoon\
\{\
    \cf5 double\cf4  value = \cf10 202884.202\cf4 ;\
    \cf7 Measurement\cf4  valueUnit = \cf9 TEASPOON\cf4 ;\
    \cf5 double\cf4  expected[] = \{\cf10 1000000\cf4 , \cf10 100000\cf4 , \cf10 10000\cf4 , \cf10 1000\cf4 , \cf10 100\cf4 , \cf10 10\cf4 , \cf10 1\cf4 , \cf10 202884.202\cf4 , \cf10 67628.0454\cf4 , \cf10 33814.0227\cf4 , \cf10 4226.75284\cf4 , \cf10 2113.37642\cf4 , \cf10 1056.68821\cf4 , \cf10 264.172052\cf4 \};\
    \cf7 Measurement\cf4  units[] = \{\cf9 MILLI\cf4 , \cf9 CENTI\cf4 , \cf9 DECI\cf4 , \cf9 JUST\cf4 , \cf9 DECA\cf4 , \cf9 HECTO\cf4 , \cf9 KILO\cf4 , \cf9 TEASPOON\cf4 , \cf9 TABLESPOON\cf4 , \cf9 FLUIDOUNCE\cf4 , \cf9 CUP\cf4 , \cf9 PINT\cf4 , \cf9 QUART\cf4 , \cf9 GALLON\cf4 \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 14\cf4 ; i++)\
    \{\
        \cf7 result\cf4  = [\cf7 capacitySystem\cf4  \cf9 convert\cf4 :value \cf9 ofUnit\cf4 :valueUnit \cf9 toUnit\cf4 :units[i]];\
        \cf2 XCTAssertTrue\cf4 ([\cf7 DoubleFunctions\cf4  \cf9 isEqual\cf4 :\cf7 result\cf4  :expected[i] :\cf10 0.1\cf4 ]);\
    \}\
\}\
\
- (\cf5 void\cf4 ) testTablespoon\
\{\
    \cf5 double\cf4  value = \cf10 67628.0454\cf4 ;\
    \cf7 Measurement\cf4  valueUnit = \cf9 TABLESPOON\cf4 ;\
    \cf5 double\cf4  expected[] = \{\cf10 1000000\cf4 , \cf10 100000\cf4 , \cf10 10000\cf4 , \cf10 1000\cf4 , \cf10 100\cf4 , \cf10 10\cf4 , \cf10 1\cf4 , \cf10 202884.202\cf4 , \cf10 67628.0454\cf4 , \cf10 33814.0227\cf4 , \cf10 4226.75284\cf4 , \cf10 2113.37642\cf4 , \cf10 1056.68821\cf4 , \cf10 264.172052\cf4 \};\
    \cf7 Measurement\cf4  units[] = \{\cf9 MILLI\cf4 , \cf9 CENTI\cf4 , \cf9 DECI\cf4 , \cf9 JUST\cf4 , \cf9 DECA\cf4 , \cf9 HECTO\cf4 , \cf9 KILO\cf4 , \cf9 TEASPOON\cf4 , \cf9 TABLESPOON\cf4 , \cf9 FLUIDOUNCE\cf4 , \cf9 CUP\cf4 , \cf9 PINT\cf4 , \cf9 QUART\cf4 , \cf9 GALLON\cf4 \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 14\cf4 ; i++)\
    \{\
        \cf7 result\cf4  = [\cf7 capacitySystem\cf4  \cf9 convert\cf4 :value \cf9 ofUnit\cf4 :valueUnit \cf9 toUnit\cf4 :units[i]];\
        \cf2 XCTAssertTrue\cf4 ([\cf7 DoubleFunctions\cf4  \cf9 isEqual\cf4 :\cf7 result\cf4  :expected[i] :\cf10 0.1\cf4 ]);\
    \}\
\}\
\
- (\cf5 void\cf4 ) testFluidOunce\
\{\
    \cf5 double\cf4  value = \cf10 33814.0227\cf4 ;\
    \cf7 Measurement\cf4  valueUnit = \cf9 FLUIDOUNCE\cf4 ;\
    \cf5 double\cf4  expected[] = \{\cf10 1000000\cf4 , \cf10 100000\cf4 , \cf10 10000\cf4 , \cf10 1000\cf4 , \cf10 100\cf4 , \cf10 10\cf4 , \cf10 1\cf4 , \cf10 202884.202\cf4 , \cf10 67628.0454\cf4 , \cf10 33814.0227\cf4 , \cf10 4226.75284\cf4 , \cf10 2113.37642\cf4 , \cf10 1056.68821\cf4 , \cf10 264.172052\cf4 \};\
    \cf7 Measurement\cf4  units[] = \{\cf9 MILLI\cf4 , \cf9 CENTI\cf4 , \cf9 DECI\cf4 , \cf9 JUST\cf4 , \cf9 DECA\cf4 , \cf9 HECTO\cf4 , \cf9 KILO\cf4 , \cf9 TEASPOON\cf4 , \cf9 TABLESPOON\cf4 , \cf9 FLUIDOUNCE\cf4 , \cf9 CUP\cf4 , \cf9 PINT\cf4 , \cf9 QUART\cf4 , \cf9 GALLON\cf4 \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 14\cf4 ; i++)\
    \{\
        \cf7 result\cf4  = [\cf7 capacitySystem\cf4  \cf9 convert\cf4 :value \cf9 ofUnit\cf4 :valueUnit \cf9 toUnit\cf4 :units[i]];\
        \cf2 XCTAssertTrue\cf4 ([\cf7 DoubleFunctions\cf4  \cf9 isEqual\cf4 :\cf7 result\cf4  :expected[i] :\cf10 0.1\cf4 ]);\
    \}\
\}\
\
- (\cf5 void\cf4 ) testCup\
\{\
    \cf5 double\cf4  value = \cf10 4226.75284\cf4 ;\
    \cf7 Measurement\cf4  valueUnit = \cf9 CUP\cf4 ;\
    \cf5 double\cf4  expected[] = \{\cf10 1000000\cf4 , \cf10 100000\cf4 , \cf10 10000\cf4 , \cf10 1000\cf4 , \cf10 100\cf4 , \cf10 10\cf4 , \cf10 1\cf4 , \cf10 202884.202\cf4 , \cf10 67628.0454\cf4 , \cf10 33814.0227\cf4 , \cf10 4226.75284\cf4 , \cf10 2113.37642\cf4 , \cf10 1056.68821\cf4 , \cf10 264.172052\cf4 \};\
    \cf7 Measurement\cf4  units[] = \{\cf9 MILLI\cf4 , \cf9 CENTI\cf4 , \cf9 DECI\cf4 , \cf9 JUST\cf4 , \cf9 DECA\cf4 , \cf9 HECTO\cf4 , \cf9 KILO\cf4 , \cf9 TEASPOON\cf4 , \cf9 TABLESPOON\cf4 , \cf9 FLUIDOUNCE\cf4 , \cf9 CUP\cf4 , \cf9 PINT\cf4 , \cf9 QUART\cf4 , \cf9 GALLON\cf4 \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 14\cf4 ; i++)\
    \{\
        \cf7 result\cf4  = [\cf7 capacitySystem\cf4  \cf9 convert\cf4 :value \cf9 ofUnit\cf4 :valueUnit \cf9 toUnit\cf4 :units[i]];\
        \cf2 XCTAssertTrue\cf4 ([\cf7 DoubleFunctions\cf4  \cf9 isEqual\cf4 :\cf7 result\cf4  :expected[i] :\cf10 0.1\cf4 ]);\
    \}\
\}\
\
- (\cf5 void\cf4 ) testPint\
\{\
    \cf5 double\cf4  value = \cf10 2113.37642\cf4 ;\
    \cf7 Measurement\cf4  valueUnit = \cf9 PINT\cf4 ;\
    \cf5 double\cf4  expected[] = \{\cf10 1000000\cf4 , \cf10 100000\cf4 , \cf10 10000\cf4 , \cf10 1000\cf4 , \cf10 100\cf4 , \cf10 10\cf4 , \cf10 1\cf4 , \cf10 202884.202\cf4 , \cf10 67628.0454\cf4 , \cf10 33814.0227\cf4 , \cf10 4226.75284\cf4 , \cf10 2113.37642\cf4 , \cf10 1056.68821\cf4 , \cf10 264.172052\cf4 \};\
    \cf7 Measurement\cf4  units[] = \{\cf9 MILLI\cf4 , \cf9 CENTI\cf4 , \cf9 DECI\cf4 , \cf9 JUST\cf4 , \cf9 DECA\cf4 , \cf9 HECTO\cf4 , \cf9 KILO\cf4 , \cf9 TEASPOON\cf4 , \cf9 TABLESPOON\cf4 , \cf9 FLUIDOUNCE\cf4 , \cf9 CUP\cf4 , \cf9 PINT\cf4 , \cf9 QUART\cf4 , \cf9 GALLON\cf4 \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 14\cf4 ; i++)\
    \{\
        \cf7 result\cf4  = [\cf7 capacitySystem\cf4  \cf9 convert\cf4 :value \cf9 ofUnit\cf4 :valueUnit \cf9 toUnit\cf4 :units[i]];\
        \cf2 XCTAssertTrue\cf4 ([\cf7 DoubleFunctions\cf4  \cf9 isEqual\cf4 :\cf7 result\cf4  :expected[i] :\cf10 0.1\cf4 ]);\
    \}\
\}\
\
- (\cf5 void\cf4 ) testQuart\
\{\
    \cf5 double\cf4  value = \cf10 1056.68821\cf4 ;\
    \cf7 Measurement\cf4  valueUnit = \cf9 QUART\cf4 ;\
    \cf5 double\cf4  expected[] = \{\cf10 1000000\cf4 , \cf10 100000\cf4 , \cf10 10000\cf4 , \cf10 1000\cf4 , \cf10 100\cf4 , \cf10 10\cf4 , \cf10 1\cf4 , \cf10 202884.202\cf4 , \cf10 67628.0454\cf4 , \cf10 33814.0227\cf4 , \cf10 4226.75284\cf4 , \cf10 2113.37642\cf4 , \cf10 1056.68821\cf4 , \cf10 264.172052\cf4 \};\
    \cf7 Measurement\cf4  units[] = \{\cf9 MILLI\cf4 , \cf9 CENTI\cf4 , \cf9 DECI\cf4 , \cf9 JUST\cf4 , \cf9 DECA\cf4 , \cf9 HECTO\cf4 , \cf9 KILO\cf4 , \cf9 TEASPOON\cf4 , \cf9 TABLESPOON\cf4 , \cf9 FLUIDOUNCE\cf4 , \cf9 CUP\cf4 , \cf9 PINT\cf4 , \cf9 QUART\cf4 , \cf9 GALLON\cf4 \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 14\cf4 ; i++)\
    \{\
        \cf7 result\cf4  = [\cf7 capacitySystem\cf4  \cf9 convert\cf4 :value \cf9 ofUnit\cf4 :valueUnit \cf9 toUnit\cf4 :units[i]];\
        \cf2 XCTAssertTrue\cf4 ([\cf7 DoubleFunctions\cf4  \cf9 isEqual\cf4 :\cf7 result\cf4  :expected[i] :\cf10 0.1\cf4 ]);\
    \}\
\}\
\
- (\cf5 void\cf4 ) testGallon\
\{\
    \cf5 double\cf4  value = \cf10 26.4172052\cf4 ;\
    \cf7 Measurement\cf4  valueUnit = \cf9 GALLON\cf4 ;\
    \cf5 double\cf4  expected[] = \{\cf10 100000\cf4 , \cf10 10000\cf4 , \cf10 1000\cf4 , \cf10 100\cf4 , \cf10 10\cf4 , \cf10 1\cf4 , \cf10 0.1\cf4 , \cf10 20288.4202\cf4 , \cf10 6762.80454\cf4 , \cf10 3381.40227\cf4 , \cf10 422.675284\cf4 , \cf10 211.337642\cf4 , \cf10 105.668821\cf4 , \cf10 26.4172052\cf4 \};\
    \cf7 Measurement\cf4  units[] = \{\cf9 MILLI\cf4 , \cf9 CENTI\cf4 , \cf9 DECI\cf4 , \cf9 JUST\cf4 , \cf9 DECA\cf4 , \cf9 HECTO\cf4 , \cf9 KILO\cf4 , \cf9 TEASPOON\cf4 , \cf9 TABLESPOON\cf4 , \cf9 FLUIDOUNCE\cf4 , \cf9 CUP\cf4 , \cf9 PINT\cf4 , \cf9 QUART\cf4 , \cf9 GALLON\cf4 \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 14\cf4 ; i++)\
    \{\
        \cf7 result\cf4  = [\cf7 capacitySystem\cf4  \cf9 convert\cf4 :value \cf9 ofUnit\cf4 :valueUnit \cf9 toUnit\cf4 :units[i]];\
        \cf2 XCTAssertTrue\cf4 ([\cf7 DoubleFunctions\cf4  \cf9 isEqual\cf4 :\cf7 result\cf4  :expected[i] :\cf10 0.1\cf4 ]);\
    \}\
\}\
\
-(\cf5 void\cf4 ) testInvalid\
\{\
    \cf7 Measurement\cf4  wrongUnits[] =\
    \{\
        \cf11 //american length\cf4 \
        \cf9 INCH\cf4 ,\
        \cf9 FOOT\cf4 ,\
        \cf9 YARD\cf4 ,\
        \cf9 CHAIN\cf4 ,\
        \cf9 FURLONG\cf4 ,\
        \cf9 MILE\cf4 ,\
        \
        \cf11 //american weight\cf4 \
        \cf9 OUNCE\cf4 ,\
        \cf9 POUND\cf4 ,\
        \cf9 TON\cf4 ,\
        \
        \cf11 //temperature\cf4 \
        \cf9 FARHENHEIT\cf4 ,\
        \cf9 CELCIUS\cf4 ,\
        \cf9 KELVIN\cf4 \
    \};\
    \
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf10 0\cf4 ; i < \cf10 12\cf4 ; i++)\
    \{\
        \cf2 XCTAssertThrows\cf4 ([\cf7 capacitySystem\cf4  \cf9 convert\cf4 :\cf10 1\cf4  \cf9 ofUnit\cf4 :wrongUnits[i] \cf9 toUnit\cf4 :\cf9 MILLI\cf4 ]);\
        \cf2 XCTAssertThrows\cf4 ([\cf7 capacitySystem\cf4  \cf9 convert\cf4 :\cf10 1\cf4  \cf9 ofUnit\cf4 :\cf9 MILLI\cf4  \cf9 toUnit\cf4 :wrongUnits[i]]);\
    \}\
\}\
\
\cf5 @end}